{"remainingRequest":"/home/billk97/Documents/personal/projects/pi-verifier/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/billk97/Documents/personal/projects/pi-verifier/src/components/AskCredentials.vue?vue&type=style&index=0&id=2e06a11a&scoped=true&lang=css&","dependencies":[{"path":"/home/billk97/Documents/personal/projects/pi-verifier/src/components/AskCredentials.vue","mtime":1658511635865},{"path":"/home/billk97/Documents/personal/projects/pi-verifier/node_modules/css-loader/dist/cjs.js","mtime":1621710788004},{"path":"/home/billk97/Documents/personal/projects/pi-verifier/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1658419021867},{"path":"/home/billk97/Documents/personal/projects/pi-verifier/node_modules/postcss-loader/src/index.js","mtime":1621710788761},{"path":"/home/billk97/Documents/personal/projects/pi-verifier/node_modules/cache-loader/dist/cjs.js","mtime":1621710778188},{"path":"/home/billk97/Documents/personal/projects/pi-verifier/node_modules/vue-loader/lib/index.js","mtime":1658419021867}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgouY29udGFpbmVyIHsKICAgIGNvbG9yOiAjZmZmZmZmOwogICAgZm9udC13ZWlnaHQ6IGJvbGQ7Cn0KLnFyLWNvZGUgewogICAgcGFkZGluZzogNXB4OwogICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZmZmZjsKICAgIGJvcmRlci1yYWRpdXM6IDEwcHg7CiAgICBib3JkZXI6IDNweCAjREY5MzQyIHNvbGlkOwogICAgd2lkdGg6IGZpdC1jb250ZW50OwogICAgbWFyZ2luOiAwIGF1dG87Cn0KCg=="},{"version":3,"sources":["AskCredentials.vue"],"names":[],"mappings":";;AAgGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"AskCredentials.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <div class=\"container\">\n        <div v-if=\"!isVerified\">\n            <h1>Room is locked !</h1>\n            <h2>To access the room please scan the bellow qr code and provide some credentials</h2>\n            <img alt=\"Vue logo\" src=\"@/assets/lock-rings.png\" style=\"margin-botton: 5px\">\n            <qr-code v-if=\"invitationBase\" :text=\"invitationBase\" class=\"qr-code\"></qr-code>\n        </div>\n        <div v-if=\"isVerified\">\n            <h1>Room is unlock</h1>\n            <h2>Enjoi</h2>\n            <img v-if=\"isVerified\" alt=\"Vue logo\" src=\"@/assets/green-unlock.png\" style=\"margin-botton: 5px\">\n        </div>\n    </div>\n</template>\n\n<script>\n    import token from '@/services/token'\n    import multitenancy from '@/services/multitenancy'\n    import connections from '@/services/connections'\n\n    export default {\n        name: \"AskCredentials\",\n        components: {\n        },\n        data() {\n            return {\n                invitationBase: null,\n                isVerified: false,\n                walletToken: null\n            }\n        },\n        created () {\n            this.changeToVerifed()\n            this.checkIfHasWallet()\n            this.createInvitation()\n            // check if wallet exists\n            // if not exists, create\n            // save bearer token\n            // send bearer toeken to backend for safe kipping\n            // create invitation\n            // check if invitation status has changed\n            // once changed do action\n            // once status complited\n            // initiate present-proof protocol\n            // check periodically if status has changed\n            // verify presentation\n            // show responce\n        },\n        methods: {\n            changeToVerifed() {\n                setTimeout(() => {\n                    this.isVerified = true;\n                }, 5000)\n            },\n            async checkIfHasWallet() {\n                let resp = null\n                try {\n                    resp = await token.checkIfTokenExist()\n                    localStorage.setItem(\"verifier-jwt\", resp.data.token)\n                } catch (e) {\n                    this.createWallet()\n                }\n                \n            },\n            async createWallet() {\n                const resp = await multitenancy.createVerifierWallet()\n                await token.saveToken(resp.data.token)\n            },\n            async createInvitation() {\n                const resp = await connections.createInvitation()\n                this.invitationBase =  btoa(JSON.stringify(resp.data.invitation))\n                console.log(resp.data.invitation)\n            }\n        }\n    }\n</script>\n\n<style scoped>\n\n    .container {\n        color: #ffffff;\n        font-weight: bold;\n    }\n    .qr-code {\n        padding: 5px;\n        background-color: #ffffff;\n        border-radius: 10px;\n        border: 3px #DF9342 solid;\n        width: fit-content;\n        margin: 0 auto;\n    }\n\n</style>\n"]}]}