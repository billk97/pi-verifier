{"remainingRequest":"/home/billk97/Documents/personal/projects/pi-verifier/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/billk97/Documents/personal/projects/pi-verifier/src/components/AskCredentials.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/billk97/Documents/personal/projects/pi-verifier/src/components/AskCredentials.vue","mtime":1658820108919},{"path":"/home/billk97/Documents/personal/projects/pi-verifier/node_modules/cache-loader/dist/cjs.js","mtime":1621710778188},{"path":"/home/billk97/Documents/personal/projects/pi-verifier/node_modules/babel-loader/lib/index.js","mtime":1650528685806},{"path":"/home/billk97/Documents/personal/projects/pi-verifier/node_modules/cache-loader/dist/cjs.js","mtime":1621710778188},{"path":"/home/billk97/Documents/personal/projects/pi-verifier/node_modules/vue-loader/lib/index.js","mtime":1658419021867}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["AskCredentials.vue"],"names":[],"mappings":";AAufile":"AskCredentials.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <div class=\"custom-container verifier-background\" :class=\"{'verifier-background-green': isVerified}\">\n        <div v-if=\"!isVerified\">\n            <h1>Room is locked !</h1>\n            <h2>To access the room please scan the bellow qr code and provide some credentials</h2>\n            <img alt=\"Vue logo\" src=\"@/assets/lock-rings.png\" style=\"margin-botton: 5px\">\n            <qr-code v-if=\"getBase64Invitation\" :text=\"getBase64Invitation\" class=\"qr-code\"></qr-code>\n        </div>\n        <div v-if=\"isVerified\">\n            <h1>Room is unlock</h1>\n            <h2>Enjoi</h2>\n            <img v-if=\"isVerified\" alt=\"Vue logo\" src=\"@/assets/green-unlock.png\" style=\"margin-botton: 5px\">\n        </div>\n        <b-button @click=\"deleteAllCredRecords\" variant=\"danger\">\n            Delete all credentials records\n        </b-button>\n        <b-button @click=\"askForCreds\" variant=\"success\">\n            Ask for credentials\n        </b-button>\n    </div>\n</template>\n\n<script>\n    import token from '@/services/token'\n    import multitenancy from '@/services/multitenancy'\n    import connections from '@/services/connections'\n    import presentproof from '@/services/presentproof'\n\n    export default {\n        name: \"AskCredentials\",\n        components: {\n        },\n        computed: {\n            getInvitation() {\n                return this.$store.getters.getInvitation\n            },\n            getBase64Invitation() {\n                return this.$store.getters.getBase64Invitation\n            },\n            getConnectionId() {\n                return this.$store.getters.getConnectionId\n            },\n            getPresExId() {\n                return this.$store.getters.getPresExId\n            }\n        },\n        watch: {\n            connectionCompleted: {\n                immediate: true,\n                handler(value) {\n                    if (value) {\n                        this.askForCreds()\n                    }\n                }\n            },\n            proofRecived: {\n                immediate: true,\n                handler(value) {\n                    if (value) {\n                        this.verifyCredentials()\n                    }\n                }\n            }\n        },\n        data() {\n            return {\n                isVerified: true,\n                walletToken: null,\n                currentConnectionId: null,\n                acceptConnectionInterval: null,\n                connectionCompleted: false,\n                proofRecivedInerval: null,\n                proofRecived: false,\n            }\n        },\n        async created () {\n            await this.checkIfHasWallet()\n            await this.createInvitationIfNotExist()\n            this.checkIfConnectionHasBeenAccepted()\n            this.checkIfHolderHasSendCredentials()\n        },\n        methods: {\n            async checkIfHasWallet() {\n                let resp = null\n                try {\n                    resp = await token.checkIfTokenExist()\n                    localStorage.setItem(\"verifier-jwt\", resp.data.token)\n                } catch (e) {\n                    this.createWallet()\n                }\n                \n            },\n            async createWallet() {\n                const resp = await multitenancy.createVerifierWallet()\n                await token.saveToken(resp.data.token)\n                localStorage.setItem(\"verifier-jwt\", resp.data.token)\n            },\n            async createInvitationIfNotExist() {\n                if (this.$store.getters.invitationExist) {\n                    console.log(\"invitation already exist\")\n                    console.log(this.getBase64Invitation)\n                    return\n                }\n                console.log(\"creating invitation\")\n                const resp = await connections.createInvitation()\n                this.$store.dispatch('updateInvitation', resp.data)\n            },\n            async deleteOrphanConnections() {\n                const resp = await connections.getConnections()\n                const walletConnections = resp.data.results\n                let connectionsToBeDeleted = []\n                for (const con of walletConnections) {\n                    if (con.rfc23_state === 'invitation-sent') {\n                        connectionsToBeDeleted.push(con.connection_id)\n                    }\n                }\n                console.log(this.currentConnectionId)\n                connectionsToBeDeleted.filter(c => { return c === this.currentConnectionId})\n                for (const con of connectionsToBeDeleted) {\n                    console.log(con)\n                    connections.deleteConnection(con)\n                }\n            },\n            async checkIfConnectionHasBeenAccepted() {\n                clearInterval(this.acceptConnectionInterval)\n                // this.acceptConnectionInterval = setInterval(async() => {\n                //     console.log(\"checkIfConnectionHasBeenAccepted runninng\")\n                //     console.log(this.acceptConnectionInterval)\n                //     if (this.connectionCompleted) {\n                //         clearInterval(this.acceptConnectionInterval)\n                //         return\n                //     }\n                //     const resp = await connections.getConnectionsById(this.getConnectionId)\n                //     const con = resp.data\n                //     if (con.rfc23_state === 'request-received') {\n                //         console.log(\"state: \",con.rfc23_state, \" connection: \", this.getConnectionId )\n                //         connections.accept(con.connection_id)\n                //         this.connectionCompleted = true\n                //         clearInterval(this.acceptConnectionInterval)\n                //     } else if (con.rfc23_state === 'completed') {\n                //         console.log(\"state: \",con.rfc23_state, \" connection: \", this.getConnectionId )\n                //         this.connectionCompleted = true\n                //         clearInterval(this.acceptConnectionInterval)\n                //     }\n                // }, 5000)\n            },\n            async askForCreds() {\n                if (this.getPresExId) {\n                    console.log(\"PresExId already exist\")\n                    return\n                }\n                console.log(\"sending request\")\n                const resp = await presentproof.sendRequest(this.getConnectionId)\n                this.$store.dispatch('updatePresExId', resp.data.pres_ex_id)\n            },\n            async checkIfHolderHasSendCredentials() {\n                clearInterval(this.proofRecivedInerval)\n                // this.proofRecivedInerval = setInterval(async() => {\n                //     console.log(\"checkIf holder has send credentials\", this.acceptConnectionInterval)\n                //     if (this.proofRecived) {\n                //         clearInterval(this.proofRecivedInerval)\n                //         return\n                //     }\n                //     if (!this.getConnectionId) {\n                //         // clearInterval(this.proofRecivedInerval)\n                //         return\n                //     }\n                //     if (!this.getPresExId) {\n                //         // clearInterval(this.proofRecivedInerval)\n                //         return\n                //     }\n                //     const resp = await presentproof.getRequestById(this.getPresExId)\n                //     const con = resp.data\n                //     console.log(\"check credentials state\", con.state)\n                //     if (con.state === 'presentation-received') {\n                //         console.log(\"proof recived and state is presentation-received\")\n                //         this.proofRecived = true\n                //         clearInterval(this.proofRecivedInerval)\n                //     } else if (con.sate === 'done') {\n                //         console.log(\"proof already recived and state is done\")\n                //         this.proofRecived = true\n                //         clearInterval(this.proofRecivedInerval)\n                //     }\n                // }, 5000)\n            },\n            async verifyCredentials() {\n                const resp = await presentproof.verify(this.getPresExId)\n                console.log(\"verifing proof\", resp.data)\n                if (resp.data.verified) {\n                    console.log(\"proof is valid\")\n                    this.isVerified = true\n                }\n\n            },\n            async deleteAllCredRecords() {\n                const resp =  await presentproof.getRequest()\n                const results = resp.data.results\n                for (const r of results) {\n                    console.log(\"deleting: \", r.pres_ex_id)\n                    presentproof.delete(r.pres_ex_id)\n                }\n            }\n        }\n    }\n</script>\n\n<style scoped>\n\n    .custom-container {\n        color: #ffffff;\n        width: 100%;\n        font-weight: bold;\n    }\n    .qr-code {\n        padding: 5px;\n        background-color: #ffffff;\n        border-radius: 10px;\n        border: 3px #DF9342 solid;\n        width: fit-content;\n        margin: 0 auto;\n    }\n    .verifier-background {\n        background-image: url('~@/assets/background.png') ;\n        background-repeat: no-repeat;\n        background-size: 100% 100%;\n        width: 100%;\n    }\n\n    .verifier-background-green {\n        background-image: url('~@/assets/green-background.png') ;\n        background-repeat: no-repeat;\n        background-size: 100% 100%;\n        width: 100%;\n    }\n</style>\n"]}]}